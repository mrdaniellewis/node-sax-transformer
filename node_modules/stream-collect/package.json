{
  "name": "stream-collect",
  "version": "1.3.0",
  "description": "Collects the output of a stream as callback or promise",
  "keywords": [
    "stream",
    "collect",
    "promise"
  ],
  "main": "index.js",
  "scripts": {
    "test": "mocha"
  },
  "dependencies": {
    "debug": "^2.1.1",
    "promise-util": "^1.1.0"
  },
  "devDependencies": {
    "mocha": "*",
    "expect": "*"
  },
  "author": {
    "name": "Daniel Lewis"
  },
  "license": "ISC",
  "repository": {
    "type": "git",
    "url": "https://github.com/mrdaniellewis/node-stream-collect.git"
  },
  "readme": "# Stream collect\n\n[![npm version](https://badge.fury.io/js/stream-collect.svg)](http://badge.fury.io/js/stream-collect)\n\nCollects a readable streams data as a string buffer or, for object streams, an array.\n\n```bash\nnpm install stream-collect\n```\n\n## collect( stream, [encoding], [cb] )\n\nCollect the contents of a stream.  The collected data will either be a `Buffer`, `String` or `Array` depending on whether `encoding` has been supplied, or it is an object stream.\n\nReturns a `Promise` that will resolve with the collected data.\n\n* `stream` the stream to collect\n* `encoding` the encoding to return data in\n* `cb` a callback that will be called with the collected data. \n\n\n```js\nvar collect = require('stream-collect');\t\nvar file = fs.createReadableStream( 'myfile' );\n\n// Collect using a promise\ncollect(file)\n\t.then( function(theWholeFile) {\n\t\t// Do something\n\t} );\n\n// Collect using a callback\ncollect( file, function(theWholeFile) {\n\t// Do something\n} )\n\n// Specify an encoding\ncollect( file, 'base64' )\n\t.then( function(theWholeFileInBase64) {\n\t\t// Do something\n\t} );\n```\n\n## `collect.stream()` / `collect.PassThrough()`\n\n\n`collect.stream()` creates a `stream.PassThrough` with an additional 'collect' event that can also act as a Promise.\n\n```js\n\nvar collect = require('stream-collect');\n\n// Using the collect event\nvar file = fs.createReadableStream( 'myfile' );\nfile.pipe( collect.stream() )\n\t.on( 'collect', function(data) {\n\t\t// data = contents of the file\n\t} );\n\n// As a Promise\nvar file = fs.createReadableStream( 'myfile' );\nfile.pipe( collect.stream() )\n\t.then(data) {\n\t\t// data = contents of the file\n\t} );\n\n```\n\nThe `collect` event is called as part of the `end` event.\n\nWhen collect is piped, any errors from the source stream will be passed to this stream and can be caught in `then` and `catch` when used as a Promise.\n\n`collect.PassThrough()` is an alternative name for `collect.stream`.  Both can be used with or without the `new` operator.\n\n## `collect.objectStream()` / `collect.PassThroughObject()`\n\nReturns a new `collect.stream` with `objectMode` set to true.\n\n## collect.addToStream(stream)\n\nAugment any stream with a `collect` event.\n\nReturns the augmented stream.\n",
  "readmeFilename": "README.MD",
  "gitHead": "383e97ae4307df715dc1345a264ef20bccc6e14f",
  "bugs": {
    "url": "https://github.com/mrdaniellewis/node-stream-collect/issues"
  },
  "homepage": "https://github.com/mrdaniellewis/node-stream-collect",
  "_id": "stream-collect@1.3.0",
  "_shasum": "b367e0b7177bfdc2265b0ef68a18faf26b1b7bca",
  "_from": "stream-collect@*"
}
