{
  "name": "pipe-box",
  "version": "1.0.2",
  "description": "Wrap a series of piped streams into a single stream",
  "main": "index.js",
  "scripts": {
    "test": "mocha"
  },
  "keywords": [
    "pipe",
    "transform",
    "stream"
  ],
  "author": {
    "name": "Daniel Lewis"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/mrdaniellewis/node-pipe-box.git"
  },
  "license": "ISC",
  "devDependencies": {
    "mocha": "*",
    "expect": "*",
    "stream-collect": "*",
    "sinon": "*"
  },
  "engines": {
    "node": ">=0.9.0"
  },
  "readme": "# Pipe box\n\n[![npm version](https://badge.fury.io/js/pipe-box.svg)](http://badge.fury.io/js/pipe-box)\n\nA stream constructor that turns a series of piped streams into a single stream.\n\nIt is duplex stream that will write to a stream and will read from another stream.\n\nSee the example below.  If the sourceStream and outputStream are not specified a pass-though stream will be used and the pipe-box will act as an (overcomplicated) pass-though stream.\n\n```js\n\nvar PipeBox = require('pipe-box');\n\nvar pipedSequence = sourceStream\n\t.pipe(someTransform)\n\t.pipe(someOtherTransform);\n\nvar pipeBox = new PipeBox( { inputStream: sourceStream, outputStream: pipedSequence } );\n\npipeBox.write('something');\npipeBox.read() // => The something transformed by the transforms\n\n// This can also be done using a constructor\n\nfunction MyAwesomeStream() {\n\tthis._inputStream = new SourceStream();\n\tthis._outputStream = this._inputStream\n\t\t.pipe( new SomeTransform() )\n\t\t.pipe( new SomeOtherTransform() );\n\n\tPipeBox.call(this);\n}\n\nutil.inherits( MyAwesomeStream, PipeBox );\n```\n",
  "readmeFilename": "README.MD",
  "gitHead": "0319eb401f02994586b1e555e89664e823dd274b",
  "bugs": {
    "url": "https://github.com/mrdaniellewis/node-pipe-box/issues"
  },
  "_id": "pipe-box@1.0.2",
  "_shasum": "d78d0700813d5fc2322b574c0233c21489c8c14f",
  "_from": "pipe-box@>=1.0.2 <1.1.0"
}
